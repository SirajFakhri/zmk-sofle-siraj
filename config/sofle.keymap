#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  //  600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&sl { /delete-property/ quick-release; };

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    ct_CustomTap: ct_CustomTap {
        compatible = "zmk,behavior-hold-tap";
        label = "CT_CUSTOMTAP";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <100>;
        flavor = "balanced";
    };

    combos {
        compatible = "zmk,combos";

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
        };

        combo_bkspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
        };

        combo_ctrlbkspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 15>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <18 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_Layer {
            bindings = <
&to 0       &to 1     &to 1  &to 1  &to 1     &to 1          &kp UP_ARROW     &kp FSLH     &kp LS(QMARK)                   &kp LS(EXCL)  &kp SQT  &kp N0  &kp MINUS
&kp TAB     &kp LGUI  &kp W  &kp F  &kp P     &kp B          &kp DOWN_ARROW   &kp J        &kp L                           &kp U         &kp Y    &kp Q   &kp LS(UNDER)
&kp LSHFT   &kp A     &kp R  &kp S  &kp T     &kp G          &kp LEFT_ARROW   &kp M        &kp N                           &kp E         &kp I    &kp O   &kp COMMA
&kp LCTRL   &kp Z     &kp X  &kp C  &kp D     &kp V          &kp RIGHT_ARROW  &kp K        &kp H                           &kp C         &kp X    &kp Z   &kp DOT
&kp C_MUTE  &to 1     &to 1  &to 1  &kp LALT  &lt 1 SPACE    &kp ENTER        &lt 2 ENTER  &ct_CustomTap RSHIFT BACKSPACE  &trans        &trans   &mo 1
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        Mouse_Layer {
            bindings = <
&trans        &kp C_PREV       &kp C_PLAY_PAUSE  &kp C_NEXT       &kp PG_DN        &kp PG_UP          &mmv MOVE_UP     &kp SLASH        &kp N7           &kp N8        &kp N9        &trans           &trans
&kp LEFT_ALT  &mkp MB4         &kp UP_ARROW      &mkp LCLK        &mkp MCLK        &mkp MB5           &mmv MOVE_DOWN   &kp MINUS        &kp NUMBER_4     &kp N5        &kp NUMBER_6  &kp EQUAL        &trans
&trans        &kp LEFT         &kp DOWN_ARROW    &kp RIGHT        &mkp RCLK        &key_repeat        &mmv MOVE_LEFT   &kp PLUS         &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp KP_ASTERISK  &trans
&trans        &rgb_ug RGB_OFF  &rgb_ug RGB_ON    &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp N0        &trans        &trans           &trans
&kp C_MUTE    &trans           &trans            &trans           &trans           &trans             &mkp LCLK        &mo 3            &trans           &trans        &trans        &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        Sym_Layer {
            bindings = <
&trans  &trans  &trans         &trans     &trans     &trans                  &trans  &trans                 &trans        &trans     &trans    &trans     &trans
&trans  &trans  &kp AMPERSAND  &kp ASTRK  &kp MINUS  &kp LEFT_PARENTHESIS    &trans  &kp RIGHT_PARENTHESIS  &kp QUESTION  &kp COLON  &kp SEMI  &kp EQUAL  &trans
&trans  &trans  &kp PRCNT      &trans     &trans     &kp LEFT_BRACKET        &trans  &kp RIGHT_BRACKET      &kp COMMA     &kp DOT    &kp SQT   &trans     &trans
&trans  &trans  &kp DOLLAR     &kp AT     &kp POUND  &kp LEFT_BRACE          &trans  &kp RIGHT_BRACE        &trans        &trans     &trans    &trans     &trans
&trans  &trans  &trans         &trans     &trans     &mo 3                   &trans  &trans                 &trans        &trans     &trans    &trans
            >;
        };

        Adjust_Layer {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &trans  &trans  &trans      &trans     &trans       &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &trans      &trans     &trans       &trans
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &trans       &trans
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Program_Layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Photoshop_Layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp C   &kp W   &kp R   &kp T        &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A   &kp U   &kp S   &kp B   &kp GRAVE    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp Z   &kp D   &kp E   &kp V   &kp M        &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp X   &trans  &kp SPACE    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Blender_Layer {
            bindings = <
&trans  &trans     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp SPACE  &kp Q   &kp W   &kp E   &kp R     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A      &kp S   &kp D   &kp F   &kp G     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp Z      &kp X   &kp C   &kp V   &kp B     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &kp K   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Coat_Layer {
            bindings = <
&trans  &trans     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp SPACE  &kp Q   &kp W   &kp R   &kp F     &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp A      &kp S   &kp D   &kp G   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp Z      &kp X   &kp Y   &kp C   &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans     &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        Number_Layer {
            bindings = <
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans    &trans  &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &kp N4  &kp N5  &kp N6  &trans    &trans  &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans    &trans  &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
&trans  &trans  &trans  &kp N0  &trans  &trans    &trans  &trans  &trans  &kp N0  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
